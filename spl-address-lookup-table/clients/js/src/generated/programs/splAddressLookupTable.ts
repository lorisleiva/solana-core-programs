/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import { Address } from '@solana/addresses';
import { getU32Encoder } from '@solana/codecs-numbers';
import { Program } from '@solana/programs';
import { memcmp } from '../shared';

export const SPL_ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS =
  'AddressLookupTab1e1111111111111111111111111' as Address<'AddressLookupTab1e1111111111111111111111111'>;

export type SplAddressLookupTableProgram =
  Program<'AddressLookupTab1e1111111111111111111111111'>;

export function getSplAddressLookupTableProgram(): SplAddressLookupTableProgram {
  return {
    name: 'splAddressLookupTable',
    address: SPL_ADDRESS_LOOKUP_TABLE_PROGRAM_ADDRESS,
  };
}

export enum SplAddressLookupTableAccount {
  AddressLookupTable,
}

export function identifySplAddressLookupTableAccount(
  account: { data: Uint8Array } | Uint8Array
): SplAddressLookupTableAccount {
  const data = account instanceof Uint8Array ? account : account.data;
  if (memcmp(data, getU32Encoder().encode(1), 0)) {
    return SplAddressLookupTableAccount.AddressLookupTable;
  }
  throw new Error(
    'The provided account could not be identified as a splAddressLookupTable account.'
  );
}

export enum SplAddressLookupTableInstruction {
  CreateLookupTable,
  FreezeLookupTable,
  ExtendLookupTable,
  DeactivateLookupTable,
  CloseLookupTable,
}

export function identifySplAddressLookupTableInstruction(
  instruction: { data: Uint8Array } | Uint8Array
): SplAddressLookupTableInstruction {
  const data =
    instruction instanceof Uint8Array ? instruction : instruction.data;
  if (memcmp(data, getU32Encoder().encode(0), 0)) {
    return SplAddressLookupTableInstruction.CreateLookupTable;
  }
  if (memcmp(data, getU32Encoder().encode(1), 0)) {
    return SplAddressLookupTableInstruction.FreezeLookupTable;
  }
  if (memcmp(data, getU32Encoder().encode(2), 0)) {
    return SplAddressLookupTableInstruction.ExtendLookupTable;
  }
  if (memcmp(data, getU32Encoder().encode(3), 0)) {
    return SplAddressLookupTableInstruction.DeactivateLookupTable;
  }
  if (memcmp(data, getU32Encoder().encode(4), 0)) {
    return SplAddressLookupTableInstruction.CloseLookupTable;
  }
  throw new Error(
    'The provided instruction could not be identified as a splAddressLookupTable instruction.'
  );
}
