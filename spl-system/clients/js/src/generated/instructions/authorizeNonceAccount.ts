/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU32Decoder, getU32Encoder } from '@solana/codecs-numbers';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  ReadonlySignerAccount,
  WritableAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import {
  ResolvedAccount,
  accountMetaWithDefault,
  getAccountMetasWithSigners,
} from '../shared';

export type AuthorizeNonceAccountInstruction<
  TProgram extends string = '11111111111111111111111111111111',
  TAccountNonceAccount extends string | IAccountMeta<string> = string,
  TAccountNonceAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountNonceAccount extends string
        ? WritableAccount<TAccountNonceAccount>
        : TAccountNonceAccount,
      TAccountNonceAuthority extends string
        ? ReadonlySignerAccount<TAccountNonceAuthority>
        : TAccountNonceAuthority,
      ...TRemainingAccounts
    ]
  >;

export type AuthorizeNonceAccountInstructionWithSigners<
  TProgram extends string = '11111111111111111111111111111111',
  TAccountNonceAccount extends string | IAccountMeta<string> = string,
  TAccountNonceAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountNonceAccount extends string
        ? WritableAccount<TAccountNonceAccount>
        : TAccountNonceAccount,
      TAccountNonceAuthority extends string
        ? ReadonlySignerAccount<TAccountNonceAuthority> &
            IAccountSignerMeta<TAccountNonceAuthority>
        : TAccountNonceAuthority,
      ...TRemainingAccounts
    ]
  >;

export type AuthorizeNonceAccountInstructionData = {
  discriminator: number;
  newNonceAuthority: Address;
};

export type AuthorizeNonceAccountInstructionDataArgs = {
  newNonceAuthority: Address;
};

export function getAuthorizeNonceAccountInstructionDataEncoder() {
  return mapEncoder(
    getStructEncoder<{ discriminator: number; newNonceAuthority: Address }>([
      ['discriminator', getU32Encoder()],
      ['newNonceAuthority', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: 7 })
  ) satisfies Encoder<AuthorizeNonceAccountInstructionDataArgs>;
}

export function getAuthorizeNonceAccountInstructionDataDecoder() {
  return getStructDecoder<AuthorizeNonceAccountInstructionData>([
    ['discriminator', getU32Decoder()],
    ['newNonceAuthority', getAddressDecoder()],
  ]) satisfies Decoder<AuthorizeNonceAccountInstructionData>;
}

export function getAuthorizeNonceAccountInstructionDataCodec(): Codec<
  AuthorizeNonceAccountInstructionDataArgs,
  AuthorizeNonceAccountInstructionData
> {
  return combineCodec(
    getAuthorizeNonceAccountInstructionDataEncoder(),
    getAuthorizeNonceAccountInstructionDataDecoder()
  );
}

export type AuthorizeNonceAccountInput<
  TAccountNonceAccount extends string,
  TAccountNonceAuthority extends string
> = {
  nonceAccount: Address<TAccountNonceAccount>;
  nonceAuthority: Address<TAccountNonceAuthority>;
  newNonceAuthority: AuthorizeNonceAccountInstructionDataArgs['newNonceAuthority'];
};

export type AuthorizeNonceAccountInputWithSigners<
  TAccountNonceAccount extends string,
  TAccountNonceAuthority extends string
> = {
  nonceAccount: Address<TAccountNonceAccount>;
  nonceAuthority: TransactionSigner<TAccountNonceAuthority>;
  newNonceAuthority: AuthorizeNonceAccountInstructionDataArgs['newNonceAuthority'];
};

export function getAuthorizeNonceAccountInstruction<
  TAccountNonceAccount extends string,
  TAccountNonceAuthority extends string,
  TProgram extends string = '11111111111111111111111111111111'
>(
  input: AuthorizeNonceAccountInputWithSigners<
    TAccountNonceAccount,
    TAccountNonceAuthority
  >
): AuthorizeNonceAccountInstructionWithSigners<
  TProgram,
  TAccountNonceAccount,
  TAccountNonceAuthority
>;
export function getAuthorizeNonceAccountInstruction<
  TAccountNonceAccount extends string,
  TAccountNonceAuthority extends string,
  TProgram extends string = '11111111111111111111111111111111'
>(
  input: AuthorizeNonceAccountInput<
    TAccountNonceAccount,
    TAccountNonceAuthority
  >
): AuthorizeNonceAccountInstruction<
  TProgram,
  TAccountNonceAccount,
  TAccountNonceAuthority
>;
export function getAuthorizeNonceAccountInstruction<
  TAccountNonceAccount extends string,
  TAccountNonceAuthority extends string,
  TProgram extends string = '11111111111111111111111111111111'
>(
  input: AuthorizeNonceAccountInput<
    TAccountNonceAccount,
    TAccountNonceAuthority
  >
): IInstruction {
  // Program address.
  const programAddress =
    '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getAuthorizeNonceAccountInstructionRaw<
      TProgram,
      TAccountNonceAccount,
      TAccountNonceAuthority
    >
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    nonceAccount: { value: input.nonceAccount ?? null, isWritable: true },
    nonceAuthority: { value: input.nonceAuthority ?? null, isWritable: false },
  };

  // Original args.
  const args = { ...input };

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getAuthorizeNonceAccountInstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    args as AuthorizeNonceAccountInstructionDataArgs,
    programAddress
  );

  return instruction;
}

export function getAuthorizeNonceAccountInstructionRaw<
  TProgram extends string = '11111111111111111111111111111111',
  TAccountNonceAccount extends string | IAccountMeta<string> = string,
  TAccountNonceAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    nonceAccount: TAccountNonceAccount extends string
      ? Address<TAccountNonceAccount>
      : TAccountNonceAccount;
    nonceAuthority: TAccountNonceAuthority extends string
      ? Address<TAccountNonceAuthority>
      : TAccountNonceAuthority;
  },
  args: AuthorizeNonceAccountInstructionDataArgs,
  programAddress: Address<TProgram> = '11111111111111111111111111111111' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(accounts.nonceAccount, AccountRole.WRITABLE),
      accountMetaWithDefault(
        accounts.nonceAuthority,
        AccountRole.READONLY_SIGNER
      ),
      ...(remainingAccounts ?? []),
    ],
    data: getAuthorizeNonceAccountInstructionDataEncoder().encode(args),
    programAddress,
  } as AuthorizeNonceAccountInstruction<
    TProgram,
    TAccountNonceAccount,
    TAccountNonceAuthority,
    TRemainingAccounts
  >;
}

export type ParsedAuthorizeNonceAccountInstruction<
  TProgram extends string = '11111111111111111111111111111111',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]
> = {
  programAddress: Address<TProgram>;
  accounts: {
    nonceAccount: TAccountMetas[0];
    nonceAuthority: TAccountMetas[1];
  };
  data: AuthorizeNonceAccountInstructionData;
};

export function parseAuthorizeNonceAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[]
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAuthorizeNonceAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      nonceAccount: getNextAccount(),
      nonceAuthority: getNextAccount(),
    },
    data: getAuthorizeNonceAccountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
