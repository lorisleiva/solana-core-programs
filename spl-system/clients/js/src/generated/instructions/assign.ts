/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */

import {
  Address,
  getAddressDecoder,
  getAddressEncoder,
} from '@solana/addresses';
import {
  Codec,
  Decoder,
  Encoder,
  combineCodec,
  mapEncoder,
} from '@solana/codecs-core';
import {
  getStructDecoder,
  getStructEncoder,
} from '@solana/codecs-data-structures';
import { getU32Decoder, getU32Encoder } from '@solana/codecs-numbers';
import {
  AccountRole,
  IAccountMeta,
  IInstruction,
  IInstructionWithAccounts,
  IInstructionWithData,
  WritableSignerAccount,
} from '@solana/instructions';
import { IAccountSignerMeta, TransactionSigner } from '@solana/signers';
import {
  ResolvedAccount,
  accountMetaWithDefault,
  getAccountMetasWithSigners,
} from '../shared';

export type AssignInstruction<
  TProgram extends string = '11111111111111111111111111111111',
  TAccountAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAccount extends string
        ? WritableSignerAccount<TAccountAccount>
        : TAccountAccount,
      ...TRemainingAccounts
    ]
  >;

export type AssignInstructionWithSigners<
  TProgram extends string = '11111111111111111111111111111111',
  TAccountAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountAccount extends string
        ? WritableSignerAccount<TAccountAccount> &
            IAccountSignerMeta<TAccountAccount>
        : TAccountAccount,
      ...TRemainingAccounts
    ]
  >;

export type AssignInstructionData = {
  discriminator: number;
  programAddress: Address;
};

export type AssignInstructionDataArgs = { programAddress: Address };

export function getAssignInstructionDataEncoder() {
  return mapEncoder(
    getStructEncoder<{ discriminator: number; programAddress: Address }>([
      ['discriminator', getU32Encoder()],
      ['programAddress', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: 1 })
  ) satisfies Encoder<AssignInstructionDataArgs>;
}

export function getAssignInstructionDataDecoder() {
  return getStructDecoder<AssignInstructionData>([
    ['discriminator', getU32Decoder()],
    ['programAddress', getAddressDecoder()],
  ]) satisfies Decoder<AssignInstructionData>;
}

export function getAssignInstructionDataCodec(): Codec<
  AssignInstructionDataArgs,
  AssignInstructionData
> {
  return combineCodec(
    getAssignInstructionDataEncoder(),
    getAssignInstructionDataDecoder()
  );
}

export type AssignInput<TAccountAccount extends string> = {
  account: Address<TAccountAccount>;
  programAddress: AssignInstructionDataArgs['programAddress'];
};

export type AssignInputWithSigners<TAccountAccount extends string> = {
  account: TransactionSigner<TAccountAccount>;
  programAddress: AssignInstructionDataArgs['programAddress'];
};

export function getAssignInstruction<
  TAccountAccount extends string,
  TProgram extends string = '11111111111111111111111111111111'
>(
  input: AssignInputWithSigners<TAccountAccount>
): AssignInstructionWithSigners<TProgram, TAccountAccount>;
export function getAssignInstruction<
  TAccountAccount extends string,
  TProgram extends string = '11111111111111111111111111111111'
>(
  input: AssignInput<TAccountAccount>
): AssignInstruction<TProgram, TAccountAccount>;
export function getAssignInstruction<
  TAccountAccount extends string,
  TProgram extends string = '11111111111111111111111111111111'
>(input: AssignInput<TAccountAccount>): IInstruction {
  // Program address.
  const programAddress =
    '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;

  // Original accounts.
  type AccountMetas = Parameters<
    typeof getAssignInstructionRaw<TProgram, TAccountAccount>
  >[0];
  const accounts: Record<keyof AccountMetas, ResolvedAccount> = {
    account: { value: input.account ?? null, isWritable: true },
  };

  // Original args.
  const args = { ...input };

  // Get account metas and signers.
  const accountMetas = getAccountMetasWithSigners(
    accounts,
    'programId',
    programAddress
  );

  const instruction = getAssignInstructionRaw(
    accountMetas as Record<keyof AccountMetas, IAccountMeta>,
    args as AssignInstructionDataArgs,
    programAddress
  );

  return instruction;
}

export function getAssignInstructionRaw<
  TProgram extends string = '11111111111111111111111111111111',
  TAccountAccount extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends Array<IAccountMeta<string>> = []
>(
  accounts: {
    account: TAccountAccount extends string
      ? Address<TAccountAccount>
      : TAccountAccount;
  },
  args: AssignInstructionDataArgs,
  programAddress: Address<TProgram> = '11111111111111111111111111111111' as Address<TProgram>,
  remainingAccounts?: TRemainingAccounts
) {
  return {
    accounts: [
      accountMetaWithDefault(accounts.account, AccountRole.WRITABLE_SIGNER),
      ...(remainingAccounts ?? []),
    ],
    data: getAssignInstructionDataEncoder().encode(args),
    programAddress,
  } as AssignInstruction<TProgram, TAccountAccount, TRemainingAccounts>;
}

export type ParsedAssignInstruction<
  TProgram extends string = '11111111111111111111111111111111',
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]
> = {
  programAddress: Address<TProgram>;
  accounts: {
    account: TAccountMetas[0];
  };
  data: AssignInstructionData;
};

export function parseAssignInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[]
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedAssignInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      account: getNextAccount(),
    },
    data: getAssignInstructionDataDecoder().decode(instruction.data),
  };
}
